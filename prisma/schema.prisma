// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  name          String?
  email         String?   @unique
  emailVerified DateTime?

  image    String?
  accounts Account[]
  sessions Session[]
  projects Project[]
}

model Project {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  // webhooks
  domains       String[]
  notifications Notification[]
  webhooks      Webhook[]

  projectId     String
  projectSecret String

  subscribers Subscriber[]
  User        User?        @relation(fields: [userId], references: [id])
  userId      String?      @db.ObjectId
}

model Subscriber {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  name        String?
  phone       String?
  email       String
  referedBy   String?
  createdAt   DateTime @default(now())
  referals    Int      @default(0) // change this to subscriber referal
  metadata    Json?
  referalCode String? // the referal code

  Project   Project? @relation(fields: [projectId], references: [id])
  projectId String
}

model Webhook {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  // webhookEvents Notification[]
  webhookEvents String[]
  signginSecret String

  endpoint    String
  description String?

  Project   Project? @relation(fields: [projectId], references: [id])
  projectId String

  analytics WebhookAnalytic[]
}

model WebhookAnalytic {
  id        String       @id @default(auto()) @map("_id") @db.ObjectId
  eventType Notification
  timestamp String // Month Day, year at Date request was sent
  content   String // json.stringify of the request body
  status    Status
  endpoint  String

  Webhook   Webhook? @relation(fields: [webhookId], references: [id])
  webhookId String
}

enum Status {
  SUCCESS
  FAILED
}

// send email, send webhook, etc
enum Notification {
  SEND_NOTIFICATION_ON_NEW_SUBSCRIBE
  SEND_NOTIFICATION_ON_DELETE
  SEND_NOTIFICATION_ON_REFERAL
}
